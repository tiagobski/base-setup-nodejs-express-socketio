#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('camul-a2:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

/* Socket.io */

const io = require('socket.io')(server);
var listSockets = [];

io.on('connection', (socket) => {
  // On connection
  //console.log(socket);
  console.log('New user connected.');
  addClient();

  // Send message only to the user that just connected
  socket.emit('msg-welcome', { message: 'You are an unique user - ' + socket.id });

  // Send message to all users
  io.sockets.emit('msg-client-list', { message: 'Client ' + socket.id + ' joined the room.' });

  // On disconnection
  socket.on('disconnect', () => {
    console.log('User disconnected.');
    removeClient();

    // Send message to all users
    io.sockets.emit('msg-client-list', { message: 'Client ' + socket.id + ' left the room.' });
  });

  // Listen to 'msg-test'
  socket.on('msg-test', (data) => {
    console.log('Received event  \'msg-test\' from client ' + socket.id + '.');
    console.log(data);
  });

  // Functions
  function addClient()
  {
    listSockets.push(socket);
  }

  function removeClient()
  {
    listSockets.splice(listSockets.indexOf(socket), 1);
  }
});